// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  avatar    String?
  password  String // Hashed password
  role      String    @default("user") // Default role is 'user'
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  posts  Post[]
  orders Order[]

  @@map("users")
}

// Post model  
model Post {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  image       String? // URL or path to uploaded image
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

// Order models
model Order {
  id          String @id @default(cuid())
  orderNumber String @unique
  status      String @default("pending") // pending, confirmed, shipped, delivered, cancelled

  // Customer info
  customerName  String
  customerPhone String
  customerEmail String?

  // Shipping address
  shippingAddress String

  // Order summary
  subtotal           Int
  discount           Int
  discountPercentage Int @default(0)
  shippingFee        Int
  total              Int

  // Payment & shipping method
  shippingMethod String // standard, express
  paymentMethod  String // cod, online
  paymentStatus  String @default("pending") // pending, paid, failed

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String?
  user   User?       @relation(fields: [userId], references: [id])
  items  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  quantity   Int
  unitPrice  Int
  totalPrice Int

  // Product info snapshot (in case product changes later)
  productName  String
  productSlug  String
  productImage String?

  // Customization info for custom products
  customization Json?

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Products model
model Size {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  products    ProductSize[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Color {
  id       String         @id @default(cuid())
  name     String         @unique
  hexCode  String
  products ProductColor[]
}

model Category {
  id       String            @id @default(cuid())
  name     String            @unique
  products ProductCategory[]
}

model ProductSize {
  productId String
  sizeId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id])

  @@id([productId, sizeId])
}

model ProductColor {
  productId String
  colorId   String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   Color   @relation(fields: [colorId], references: [id])

  @@id([productId, colorId])
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Product {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String
  originalPrice  Int
  salePrice      Int
  rating         Float    @default(0)
  reviewCount    Int      @default(0)
  isOnSale       Boolean  @default(false)
  ingredients    String
  usage          String
  burnTime       String
  suitableFor    String
  detailedSize   String
  isCustomizable Boolean  @default(false)
  thumbnailUrl   String?
  imageUrls      String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sizes      ProductSize[]
  colors     ProductColor[]
  categories ProductCategory[]
  orderItems OrderItem[]
}
