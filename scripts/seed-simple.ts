import prisma from "../utils/db";

// Seed colors and sizes
async function seedColorsAndSizes() {
  try {
    // Seed colors
    const existingColors = await prisma.color.findMany();
    if (existingColors.length === 0) {
      const colors = [
        {name: "Tr·∫Øng", hexCode: "#FFFFFF"},
        {name: "ƒêen", hexCode: "#000000"},
        {name: "H·ªìng", hexCode: "#FFB6C1"},
        {name: "T√≠m", hexCode: "#DDA0DD"},
        {name: "Xanh d∆∞∆°ng", hexCode: "#87CEEB"},
        {name: "Xanh l√°", hexCode: "#90EE90"},
        {name: "V√†ng", hexCode: "#FFFF99"},
        {name: "Cam", hexCode: "#FFA07A"},
        {name: "ƒê·ªè", hexCode: "#FA8072"},
        {name: "N√¢u", hexCode: "#D2B48C"},
        {name: "X√°m", hexCode: "#808080"},
        {name: "Kem", hexCode: "#FFFDD0"},
        {name: "B·∫°c", hexCode: "#C0C0C0"},
        {name: "V√†ng gold", hexCode: "#FFD700"},
        {name: "Xanh navy", hexCode: "#000080"},
      ];

      for (const color of colors) {
        await prisma.color.create({data: color});
      }
      console.log("‚úÖ Successfully seeded colors");
    }

    // Seed sizes
    const existingSizes = await prisma.size.findMany();
    if (existingSizes.length === 0) {
      const sizes = [
        {
          name: "20x30cm",
          description: "K√≠ch th∆∞·ªõc nh·ªè - ph√π h·ª£p kh√¥ng gian nh·ªè, b√†n l√†m vi·ªác",
        },
        {
          name: "30x40cm",
          description: "K√≠ch th∆∞·ªõc trung b√¨nh - ph√π h·ª£p ph√≤ng ng·ªß, h√†nh lang",
        },
        {
          name: "40x60cm",
          description: "K√≠ch th∆∞·ªõc l·ªõn - ph√π h·ª£p ph√≤ng kh√°ch, kh√¥ng gian r·ªông",
        },
        {
          name: "50x70cm",
          description: "K√≠ch th∆∞·ªõc r·∫•t l·ªõn - ph√π h·ª£p s·∫£nh l·ªõn, ph√≤ng h·ªçp",
        },
        {name: "A4 (21x29.7cm)", description: "K√≠ch th∆∞·ªõc ti√™u chu·∫©n A4"},
        {name: "A3 (29.7x42cm)", description: "K√≠ch th∆∞·ªõc ti√™u chu·∫©n A3"},
        {
          name: "60x80cm",
          description:
            "K√≠ch th∆∞·ªõc l·ªõn panorama - ph√π h·ª£p trang tr√≠ t∆∞·ªùng ch√≠nh",
        },
        {name: "30x30cm", description: "Tranh vu√¥ng nh·ªè - phong c√°ch hi·ªán ƒë·∫°i"},
        {
          name: "40x40cm",
          description: "Tranh vu√¥ng trung - n·ªïi b·∫≠t tr√™n t∆∞·ªùng",
        },
        {
          name: "50x50cm",
          description: "Tranh vu√¥ng l·ªõn - ƒëi·ªÉm nh·∫•n kh√¥ng gian",
        },
        {
          name: "60x20cm",
          description: "K√≠ch th∆∞·ªõc ngang - ph√π h·ª£p tranh phong c·∫£nh",
        },
        {
          name: "80x120cm",
          description:
            "K√≠ch th∆∞·ªõc si√™u l·ªõn - t·∫°o ƒëi·ªÉm nh·∫•n ch√≠nh trong kh√¥ng gian",
        },
        {name: "A2 (42x59.4cm)", description: "K√≠ch th∆∞·ªõc ti√™u chu·∫©n A2"},
        {name: "A1 (59.4x84.1cm)", description: "K√≠ch th∆∞·ªõc ti√™u chu·∫©n A1"},
        {
          name: "T√πy ch·ªânh",
          description: "K√≠ch th∆∞·ªõc t√πy ch·ªânh theo y√™u c·∫ßu kh√°ch h√†ng",
        },
      ];

      for (const size of sizes) {
        await prisma.size.create({data: size});
      }
      console.log("‚úÖ Successfully seeded sizes");
    }

    // Seed categories
    const existingCategories = await prisma.category.findMany();
    if (existingCategories.length === 0) {
      const categories = [
        {
          name: "Tranh phong c·∫£nh",
          description: "Tranh thi√™n nhi√™n, phong c·∫£nh ƒë·∫πp",
        },
        {
          name: "Tranh tr·ª´u t∆∞·ª£ng",
          description: "Tranh ngh·ªá thu·∫≠t hi·ªán ƒë·∫°i, tr·ª´u t∆∞·ª£ng",
        },
        {
          name: "Tranh ch√¢n dung",
          description: "Tranh v·∫Ω ng∆∞·ªùi, ch√¢n dung ngh·ªá thu·∫≠t",
        },
        {
          name: "Tranh tƒ©nh v·∫≠t",
          description: "Tranh v·∫Ω ƒë·ªì v·∫≠t, hoa qu·∫£, v·∫≠t d·ª•ng",
        },
        {
          name: "Tranh ƒë·ªông v·∫≠t",
          description: "Tranh v·∫Ω c√°c lo√†i ƒë·ªông v·∫≠t ƒë√°ng y√™u",
        },
        {
          name: "Tranh t√πy ch·ªânh",
          description: "Tranh ƒë∆∞·ª£c v·∫Ω theo y√™u c·∫ßu ri√™ng",
        },
        {
          name: "Tranh minimalist",
          description: "Tranh phong c√°ch t·ªëi gi·∫£n, ƒë∆°n gi·∫£n",
        },
        {
          name: "Tranh vintage",
          description: "Tranh phong c√°ch c·ªï ƒëi·ªÉn, ho√†i c·ªï",
        },
        {
          name: "Tranh digital art",
          description: "Tranh ngh·ªá thu·∫≠t s·ªë hi·ªán ƒë·∫°i",
        },
        {name: "Tranh watercolor", description: "Tranh m√†u n∆∞·ªõc ngh·ªá thu·∫≠t"},
        {
          name: "Tranh oil painting",
          description: "Tranh s∆°n d·∫ßu ch·∫•t l∆∞·ª£ng cao",
        },
        {
          name: "Tranh acrylic",
          description: "Tranh acrylic hi·ªán ƒë·∫°i v√† b·ªÅn m√†u",
        },
        {
          name: "Tranh mandala",
          description: "Tranh mandala t√¢m linh, thi·ªÅn ƒë·ªãnh",
        },
        {
          name: "Tranh typography",
          description: "Tranh ch·ªØ ngh·ªá thu·∫≠t, quote truy·ªÅn c·∫£m h·ª©ng",
        },
        {name: "Tranh pop art", description: "Tranh phong c√°ch pop art s·∫∑c s·ª°"},
      ];

      for (const category of categories) {
        await prisma.category.create({data: category});
      }
      console.log("‚úÖ Successfully seeded categories");
    }

    return {success: true};
  } catch (error) {
    console.error("‚ùå Error seeding colors and sizes:", error);
    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : "Failed to seed colors and sizes",
    };
  }
}

async function seedProducts() {
  try {
    const existingProducts = await prisma.product.findMany();

    if (existingProducts.length === 0) {
      // Get colors, sizes, and categories for relations
      const [colors, sizes, categories] = await Promise.all([
        prisma.color.findMany(),
        prisma.size.findMany(),
        prisma.category.findMany(),
      ]);

      // T·∫°o 100 s·∫£n ph·∫©m
      console.log("üñºÔ∏è Creating 100 products...");

      for (let i = 0; i < 100; i++) {
        const productNumber = i + 1;
        const name = `Tranh Ngh·ªá Thu·∫≠t S·ªë ${productNumber}`;
        const isOnSale = Math.random() > 0.7;
        const originalPrice = Math.floor(Math.random() * 500000) + 100000;
        const salePrice = isOnSale
          ? Math.floor(originalPrice * 0.8)
          : originalPrice;
        const rating = (Math.random() * 2 + 3).toFixed(1);
        const reviewCount = Math.floor(Math.random() * 100) + 1;

        const productData = {
          name,
          slug: `tranh-nghe-thuat-so-${productNumber}`,
          description: `T√°c ph·∫©m ngh·ªá thu·∫≠t tinh t·∫ø s·ªë ${productNumber}, mang ƒë·∫øn v·∫ª ƒë·∫πp t·ª± nhi√™n cho kh√¥ng gian s·ªëng`,
          originalPrice,
          salePrice,
          rating: parseFloat(rating as string),
          reviewCount,
          isOnSale,
          ingredients: "Canvas cao c·∫•p, m·ª±c in UV b·ªÅn m√†u, khung g·ªó t·ª± nhi√™n",
          usage: "Treo t∆∞·ªùng trong nh√†, tr√°nh √°nh n·∫Øng tr·ª±c ti·∫øp v√† ƒë·ªô ·∫©m cao",
          burnTime: `B·ªÅn m√†u ${Math.floor(Math.random() * 20) + 15}-${
            Math.floor(Math.random() * 20) + 35
          } nƒÉm`,
          suitableFor: "Ph√≤ng kh√°ch, ph√≤ng ng·ªß, vƒÉn ph√≤ng",
          detailedSize: "Phong c√°ch hi·ªán ƒë·∫°i, th·ªÉ hi·ªán s·ª± tinh t·∫ø",
          isCustomizable: Math.random() > 0.6,
          thumbnailUrl: "/img/products/product-1.png",
          imageUrls: [
            "/img/products/product-1.png",
            "/img/products/product-2.png",
          ],
        };

        const product = await prisma.product.create({
          data: productData,
        });

        // Add random color
        const randomColor = colors[Math.floor(Math.random() * colors.length)];
        await prisma.productColor.create({
          data: {
            productId: product.id,
            colorId: randomColor.id,
          },
        });

        // Add random size
        const randomSize = sizes[Math.floor(Math.random() * sizes.length)];
        await prisma.productSize.create({
          data: {
            productId: product.id,
            sizeId: randomSize.id,
          },
        });

        // Add random category
        const randomCategory =
          categories[Math.floor(Math.random() * categories.length)];
        await prisma.productCategory.create({
          data: {
            productId: product.id,
            categoryId: randomCategory.id,
          },
        });

        if ((i + 1) % 10 === 0) {
          console.log(`üì¶ Created ${i + 1}/100 products...`);
        }
      }

      console.log("‚úÖ Successfully seeded 100 products");
    } else {
      console.log("‚ö†Ô∏è Products already exist, skipping seeding");
    }

    return {success: true};
  } catch (error) {
    console.error("‚ùå Error seeding products:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to seed products",
    };
  }
}

async function main() {
  console.log("üå± B·∫Øt ƒë·∫ßu seed database...");

  try {
    console.log("üé® Seeding colors, sizes, and categories...");
    const colorsResult = await seedColorsAndSizes();
    if (!colorsResult.success) {
      throw new Error(`Colors/Sizes seeding failed: ${colorsResult.error}`);
    }

    console.log("üñºÔ∏è Seeding products...");
    const productsResult = await seedProducts();
    if (!productsResult.success) {
      throw new Error(`Products seeding failed: ${productsResult.error}`);
    }

    console.log("üéâ All seeding completed successfully!");
    console.log("üìä ƒê√£ t·∫°o:");
    console.log("   ‚Ä¢ 15 danh m·ª•c s·∫£n ph·∫©m");
    console.log("   ‚Ä¢ 15 m√†u s·∫Øc");
    console.log("   ‚Ä¢ 15 k√≠ch th∆∞·ªõc");
    console.log("   ‚Ä¢ 100 s·∫£n ph·∫©m tranh");
  } catch (error) {
    console.error("‚ùå Error in seeding:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main().catch(console.error);
